import java.util.Stack;

public class RobotDirection {
	final static int N = 0;
	final static int W = 1;
	final static int S = 2;
	final static int E = 3;
	static float length;
	static char directionChar;
	static int direction;
	
	static float longitude = 0;
	static float latitude = 0;
	public static void main(String[] args) {
		Stack<String> instructionStack = new Stack<String>();
		instructionStack.push("12.1m W");
		Stack<Instruction> instructions = new Stack<Instruction>();
		for (int i = 0; i < instructionStack.size(); i++) {
			System.out.println(instructionStack.peek());
			length = Float.parseFloat(instructionStack.peek().substring(0, 3));
			directionChar = instructionStack.peek().charAt(6);
			if (instructionStack.peek().substring(6).equals("N")) {
				direction = 0;
			}
			if (instructionStack.peek().substring(6).equals("W")) {
				direction = 1;
			}
			if (instructionStack.peek().substring(6).equals("S")) {
				direction = 2;
			}
			if (instructionStack.peek().substring(6).equals("E")) {
				direction = 3;
			}
			instructions.push(new Instruction(length, direction));
			instructionStack.pop();
		}
		int x;
		float y;
		for (int i = 0; i < instructions.size(); i++) {
			x = instructions.peek().getDirection();
			y = instructions.peek().getAmount();
			switch (x) {
			case 0:
				longitude += y;
				break;
			case 1:
				latitude -= y;
				break;
			case 2:
				longitude -= y;
				break;
			case 3:
				latitude += y;
				break;

			default:
				break;
			}
		}
		
		System.out.println(latitude + ", " + longitude);
	}
}

class Instruction {
	float amount;
	int direction;
	Instruction(){}
	Instruction(float amount, int direction){
			this.amount = amount;
			this.direction = direction;
		}
		public float getAmount(){
			return amount;
		}
		public int getDirection(){
			return direction;
		}
		public void setAmount(float amount){
			this.amount = amount;
		}
		public void setSuperPower(int direction){
			this.direction = direction;
		}
		public String toString(){
			return"meters: " + amount + "; superPower: " + direction;
		}
}
